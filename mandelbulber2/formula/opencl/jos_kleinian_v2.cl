/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * JosLeys-Kleinian V2 formula
 * @reference
 *
 http://www.fractalforums.com/3d-fractal-generation/an-escape-tim-algorithm-for-kleinian-group-limit-sets/msg98248/#msg98248
 * This formula contains aux.color and aux.pseudoKleinianDE

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "JosKleinianV2Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 JosKleinianV2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	// sphere inversion
	if (fractal->transformCommon.sphereInversionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD1)
	{
		REAL rr = 1.0f;
		z += fractal->transformCommon.offset000;
		rr = dot(z, z);
		z *= native_divide(fractal->transformCommon.maxR2d1, rr);
		z += fractal->transformCommon.additionConstant000 - fractal->transformCommon.offset000;
		z *= fractal->transformCommon.scaleA1;
		// REAL r = native_sqrt(rr);
		aux->DE *= (native_divide(fractal->transformCommon.maxR2d1, rr)) * fractal->analyticDE.scale1
							 * fractal->transformCommon.scaleA1;
	}

	// kleinian
	if (aux->i >= fractal->transformCommon.startIterationsF
			&& aux->i < fractal->transformCommon.stopIterationsF)
	{
		REAL a = fractal->transformCommon.foldingValue;
		REAL b = fractal->transformCommon.offset;
		REAL c = fractal->transformCommon.offsetA0;
		REAL f = sign(b);

		// wrap
		REAL4 box_size = fractal->transformCommon.offset111;

		{
			z.x += box_size.x;
			z.z += box_size.z;
			z.x = z.x - 2.0f * box_size.x * floor(native_divide(z.x, 2.0f) * box_size.x) - box_size.x;
			z.z = z.z - 2.0f * box_size.z * floor(native_divide(z.z, 2.0f) * box_size.z) - box_size.z;
			z.y += box_size.y - 1.0f;
			z.y = z.y - a * box_size.y * floor(native_divide(z.y, a) * box_size.y);
			z.y -= (box_size.y - 1.0f);
		}
		// REAL perc = fractal->transformCommon.scaleG1 * 0.2f;
		REAL perc = fractal->transformCommon.scaleG1;

		// REAL tempY = perc * native_sin(f * M_PI_F * native_divide((mad(b, 0.5f, z.x)), box_size.x));

		if (!fractal->transformCommon.functionEnabledByFalse)
		{
			if (z.y >= a * (0.5f
											 + perc * 0.2f * native_sin(f * M_PI_F * native_divide(
																																 (mad(b, 0.5f, z.x)), box_size.x))))
			{ // z = (REAL4) {-b, a, 0.0f, z.w} - z;
				z.x = -z.x - b;
				z.y = -z.y + a;
				z.z = -z.z - c;
			}
		}
		else
		{
			// REAL tempY = native_sin(f * M_PI_F * native_divide((mad(b, 0.5f, z.x)), box_size.x));

			// if (z.y >= a * (0.5f)) // + 0.2f * native_sin(f * M_PI_F * native_divide((mad(b, 0.5f,
			// z.x)), box_size.x))))
			if (z.y >= native_divide(a, 2.0f))
			{ // z = (REAL4) {-b, a, 0.0f, z.w} - z;
				z.x = -z.x - b;
				z.y = -z.y + a;
				z.z = -z.z - c;
			}
		}

		REAL rr = dot(z, z);

		REAL4 colorVector = (REAL4){z.x, z.y, z.z, rr};
		aux->color = min(aux->color, length(colorVector)); // For coloring

		REAL iR = native_recip(rr);
		z *= -iR; // invert and mirror
		z.x = -z.x - b;
		z.y = a + z.y;
		z.z = -z.z - c;

		aux->pseudoKleinianDE *= iR; // TODO remove after testing
		aux->DE *= fabs(iR);
	}

	/*if (fractal->analyticDE.enabledFalse)
	{ // analytic DE adjustment
		aux->pseudoKleinianDE =
			mad(aux->pseudoKleinianDE, fractal->analyticDE.scale1, fractal->analyticDE.offset0); // TODO
	remove after testing aux->DE = mad(aux->DE, fractal->analyticDE.scale1,
	fractal->analyticDE.offset0);


	}*/
	/*if (fractal->transformCommon.functionEnabledDFalse
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD1)
	{
		REAL rSqrL;
		REAL4 tempC;
		if (fractal->transformCommon.functionEnabledSwFalse)
		{
			tempC = aux->c;
			tempC *= fractal->transformCommon.constantMultiplier000;
			rSqrL = dot(tempC, tempC);
			// if (rSqrL < 1e-21f) rSqrL = 1e-21f;
			rSqrL = native_recip(rSqrL);
			tempC *= rSqrL;
			aux->c = tempC;

		}
		else
		{
			tempC = aux->const_c;
			tempC *= fractal->transformCommon.constantMultiplier000;
			rSqrL = dot(tempC, tempC);
			// if (rSqrL < 1e-21f) rSqrL = 1e-21f;
			rSqrL = native_recip(rSqrL);
			tempC *= rSqrL;
		}
		z +=tempC;
	}*/

	if (fractal->transformCommon.functionEnabledEFalse
			&& aux->i >= fractal->transformCommon.startIterationsE
			&& aux->i < fractal->transformCommon.stopIterationsE)
	{
		z.z = sign(z.z) * (fractal->transformCommon.offset1 - fabs(z.z)
												+ fabs(z.z) * fractal->transformCommon.scale0);
	}
	return z;
}