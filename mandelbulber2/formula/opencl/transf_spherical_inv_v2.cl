/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * spherical invert ( v2.17)
 * from M3D. Formula by Luca GN 2011, updated May 2012.
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "TransfSphericalInvV2Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfSphericalInvV2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledCz)
	{
		if (fractal->transformCommon.sphereInversionEnabledFalse)
		{
			if (aux->i < 1)
			{
				REAL rr;
				z += fractal->transformCommon.offset000;
				rr = dot(z, z);
				z *= native_divide(fractal->transformCommon.maxR2d1, rr);
				z += fractal->transformCommon.additionConstant000 - fractal->transformCommon.offset000;
			}
		}
		else
		{
			if (aux->i >= fractal->transformCommon.startIterationsD
					&& aux->i < fractal->transformCommon.stopIterationsD1)
			{
				REAL rr = 1.0f;
				z += fractal->transformCommon.offset000;
				rr = dot(z, z);
				z *= native_divide(fractal->transformCommon.maxR2d1, rr);
				z += fractal->transformCommon.additionConstant000 - fractal->transformCommon.offset000;
				// REAL r = native_sqrt(rr);
				aux->DE = native_divide((fractal->transformCommon.maxR2d1), rr);
			}
		}
	}
	// REAL minR2 = fractal->transformCommon.minR2p25;
	if (fractal->transformCommon.functionEnabledCxFalse
			&& aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		REAL rr = dot(z, z);

		z += fractal->mandelbox.offset;
		if (rr < fractal->mandelbox.foldingSphericalFixed)
		{
			REAL mode = 0.0f;
			if (fractal->transformCommon.functionEnabledFalse) // Mode 1 minR0
			{
				if (rr < fractal->transformCommon.minR0) mode = fractal->transformCommon.minR0;
			}
			if (fractal->transformCommon.functionEnabledxFalse) // Mode 2
			{
				if (rr < fractal->transformCommon.minR0)
					mode = mad(2.0f, fractal->transformCommon.minR0, -rr);
			}
			mode = native_recip(mode);
			z *= mode;
			aux->DE *= fabs(mode);
		}
	}

	if (fractal->analyticDE.enabledFalse)
	{
		aux->DE = mad(aux->DE, fractal->analyticDE.scale1, fractal->analyticDE.offset0);
	}
	return z;
}